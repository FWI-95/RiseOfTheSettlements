Hier ist der gesamte Chat-Verlauf inklusive aller Nachrichten und Code:

---

**Nutzer:** Ich benötige in der GameLoop verschiedene Klassen für Gebäude zur Einheitenproduktion.

Es soll folgende Gebäude und Einheiten zur Verfügung stehen:

- **Kaserne**, bildet Schwertkämpfer und Lanzenträger aus
- **Schießstand**, bildet Bogenschützen und Armbrustschützen aus
- **Stall**, bildet Schwertreiter und Bogenreiter aus
- **Kanonenschmiede**, bildet leichte Kanone und Schwere Kanone aus

Die Produktion einer Einheit soll je nach Upgrade-Level des Gebäudes schneller werden.
Die Einheiten sollen erst verfügbar sein, wenn sie in der Universität erforscht wurden.

---

**Assistent:**
Hier wäre eine mögliche Klassenstruktur für deine Gebäude und deren Produktionsmechanik in Java:

### **1. Abstrakte Gebäude-Klasse**
Diese Klasse definiert grundlegende Attribute und Methoden für alle Gebäude:

```java
import java.util.HashMap;
import java.util.Map;

public abstract class Gebäude {
    protected int upgradeLevel;
    protected Map<String, Boolean> erforschteEinheiten;
    
    public Gebäude() {
        this.upgradeLevel = 1;
        this.erforschteEinheiten = new HashMap<>();
    }

    public void upgrade() {
        this.upgradeLevel++;
    }

    public abstract void produziereEinheit(String einheit);
    
    public void forscheEinheit(String einheit) {
        erforschteEinheiten.put(einheit, true);
    }

    protected boolean istErforscht(String einheit) {
        return erforschteEinheiten.getOrDefault(einheit, false);
    }

    protected int getProduktionszeit(int basisZeit) {
        return (int) (basisZeit / (1 + (0.2 * (upgradeLevel - 1)))); // 20% schneller pro Level
    }
}
```

---

### **2. Spezifische Gebäude-Klassen**
Jede Gebäude-Klasse erbt von `Gebäude` und definiert die verfügbaren Einheiten.

#### **Kaserne**
```java
public class Kaserne extends Gebäude {
    public Kaserne() {
        super();
    }

    @Override
    public void produziereEinheit(String einheit) {
        if (!istErforscht(einheit)) {
            System.out.println(einheit + " wurde noch nicht erforscht.");
            return;
        }

        int basisZeit = switch (einheit) {
            case "Schwertkämpfer" -> 5000;
            case "Lanzenträger" -> 4000;
            default -> {
                System.out.println("Ungültige Einheit für die Kaserne.");
                yield -1;
            }
        };

        if (basisZeit != -1) {
            System.out.println(einheit + " wird in " + getProduktionszeit(basisZeit) + " ms produziert.");
        }
    }
}
```

#### **Schießstand**
```java
public class Schießstand extends Gebäude {
    public Schießstand() {
        super();
    }

    @Override
    public void produziereEinheit(String einheit) {
        if (!istErforscht(einheit)) {
            System.out.println(einheit + " wurde noch nicht erforscht.");
            return;
        }

        int basisZeit = switch (einheit) {
            case "Bogenschütze" -> 4500;
            case "Armbrustschütze" -> 5500;
            default -> {
                System.out.println("Ungültige Einheit für den Schießstand.");
                yield -1;
            }
        };

        if (basisZeit != -1) {
            System.out.println(einheit + " wird in " + getProduktionszeit(basisZeit) + " ms produziert.");
        }
    }
}
```

#### **Stall**
```java
public class Stall extends Gebäude {
    public Stall() {
        super();
    }

    @Override
    public void produziereEinheit(String einheit) {
        if (!istErforscht(einheit)) {
            System.out.println(einheit + " wurde noch nicht erforscht.");
            return;
        }

        int basisZeit = switch (einheit) {
            case "Schwertreiter" -> 6000;
            case "Bogenreiter" -> 6500;
            default -> {
                System.out.println("Ungültige Einheit für den Stall.");
                yield -1;
            }
        };

        if (basisZeit != -1) {
            System.out.println(einheit + " wird in " + getProduktionszeit(basisZeit) + " ms produziert.");
        }
    }
}
```

#### **Kanonenschmiede**
```java
public class Kanonenschmiede extends Gebäude {
    public Kanonenschmiede() {
        super();
    }

    @Override
    public void produziereEinheit(String einheit) {
        if (!istErforscht(einheit)) {
            System.out.println(einheit + " wurde noch nicht erforscht.");
            return;
        }

        int basisZeit = switch (einheit) {
            case "Leichte Kanone" -> 8000;
            case "Schwere Kanone" -> 10000;
            default -> {
                System.out.println("Ungültige Einheit für die Kanonenschmiede.");
                yield -1;
            }
        };

        if (basisZeit != -1) {
            System.out.println(einheit + " wird in " + getProduktionszeit(basisZeit) + " ms produziert.");
        }
    }
}
```

---

### **3. Beispielnutzung**
```java
public class SpielTest {
    public static void main(String[] args) {
        Kaserne kaserne = new Kaserne();
        kaserne.forscheEinheit("Schwertkämpfer");
        
        kaserne.produziereEinheit("Schwertkämpfer"); // Normale Zeit
        kaserne.upgrade();
        kaserne.produziereEinheit("Schwertkämpfer"); // Schnellere Produktion

        Stall stall = new Stall();
        stall.produziereEinheit("Bogenreiter"); // Nicht erforscht
        stall.forscheEinheit("Bogenreiter");
        stall.produziereEinheit("Bogenreiter"); // Jetzt möglich
    }
}
```

---

### **Zusammenfassung**
✅ Gebäude produzieren nur erforschte Einheiten.  
✅ Produktion wird durch Upgrade-Level schneller (20% pro Level).  
✅ Flexible Struktur für neue Gebäude und Einheiten.


[Benutzer]: Ich ben√∂tige ein Handling der verschiedenen erforschbaren Dinge. Es soll eine Universit√§t pro Dorf geben, um verschiedene Vorteile, Geb√§ude und Einheitentypen zu erforschen.

Die einzelnen Geb√§ude sollen Zugriff haben, ob etwas erforscht ist oder nicht.

[ChatGPT]: 
F√ºr dein Forschungssystem w√ºrde ich eine zentrale **Forschungsverwaltung** entwerfen, die mit der Universit√§t eines Dorfs verkn√ºpft ist. Dabei k√∂nnten folgende Konzepte zum Einsatz kommen:

1. **Forschungsbaum oder lineare Forschungsliste**  
   - Jede Forschung hat Voraussetzungen (z. B. andere abgeschlossene Forschungen oder Dorf-Level).  
   - Forschungen k√∂nnen Boni gew√§hren, neue Geb√§ude freischalten oder neue Einheiten erm√∂glichen.  

2. **Universit√§t als Forschungseinheit pro Dorf**  
   - Jede Universit√§t verwaltet den Fortschritt der Forschungen eines Dorfs.  
   - Forschungen kosten Ressourcen und Zeit.  

3. **Geb√§ude & Einheiten erhalten Zugriff auf die Forschungsergebnisse**  
   - Jedes Geb√§ude kann nachschauen, ob eine Forschung abgeschlossen wurde, um Funktionen freizuschalten.  
   - Einheiten k√∂nnten durch abgeschlossene Forschungen verbesserte Werte oder neue F√§higkeiten erhalten.  

Willst du eine **dezentrale Forschung pro Dorf** oder eine **globale Forschung f√ºr alle D√∂rfer**? Ich kann dir direkt eine Umsetzung vorschlagen. üòä

[Benutzer]: Dezentrale Forschung pro Dorf

[ChatGPT]: 
Dann wird jede Universit√§t eines Dorfs ihre eigene Forschung verwalten. Ich schlage folgende Klassenstruktur vor:

---

### **Struktur des Forschungssystems**
- **`ResearchType`** (Enum oder Klasse)  
  - Definiert die m√∂glichen Forschungen.  
- **`Research`** (Klasse)  
  - Speichert den aktuellen Fortschritt einer Forschung.  
- **`University`** (Klasse)  
  - Verwaltet die Forschungen eines Dorfs.  
  - Startet und √ºberpr√ºft Forschungen.  
- **`Building`** (Klasse)  
  - Pr√ºft, ob eine Forschung abgeschlossen ist.  

Hier eine Java-Implementierung:

---

### **Java-Code f√ºr das Forschungssystem**
```java
import java.util.*;

enum ResearchType {
    ADVANCED_FARMING, // Erm√∂glicht bessere Landwirtschaft
    MILITARY_TACTICS, // Schaltet neue Einheiten frei
    ARCHITECTURE // Erm√∂glicht neue Geb√§ude
}

class Research {
    private final ResearchType type;
    private boolean completed = false;
    private long startTime;
    private long researchDuration; // in Millisekunden

    public Research(ResearchType type, long duration) {
        this.type = type;
        this.researchDuration = duration;
    }

    public void startResearch() {
        if (!completed) {
            this.startTime = System.currentTimeMillis();
        }
    }

    public void update() {
        if (!completed && (System.currentTimeMillis() - startTime >= researchDuration)) {
            completed = true;
        }
    }

    public boolean isCompleted() {
        return completed;
    }

    public ResearchType getType() {
        return type;
    }
}

class University {
    private final Map<ResearchType, Research> researchMap = new HashMap<>();

    public University() {
        // Forschungen mit Dauer initialisieren (z.B. 10 Sekunden f√ºr jede)
        researchMap.put(ResearchType.ADVANCED_FARMING, new Research(ResearchType.ADVANCED_FARMING, 10000));
        researchMap.put(ResearchType.MILITARY_TACTICS, new Research(ResearchType.MILITARY_TACTICS, 15000));
        researchMap.put(ResearchType.ARCHITECTURE, new Research(ResearchType.ARCHITECTURE, 20000));
    }

    public void startResearch(ResearchType type) {
        if (researchMap.containsKey(type)) {
            researchMap.get(type).startResearch();
        }
    }

    public void updateResearchProgress() {
        for (Research research : researchMap.values()) {
            research.update();
        }
    }

    public boolean isResearchCompleted(ResearchType type) {
        return researchMap.containsKey(type) && researchMap.get(type).isCompleted();
    }
}

class Building {
    private final String name;
    private final University university; // Referenz zur Universit√§t des Dorfs

    public Building(String name, University university) {
        this.name = name;
        this.university = university;
    }

    public boolean isFeatureAvailable(ResearchType requiredResearch) {
        return university.isResearchCompleted(requiredResearch);
    }
}
```

---

### **Wie es funktioniert**
1. **Universit√§t verwaltet Forschungen:** Jede Universit√§t h√§lt den Fortschritt f√ºr ihr Dorf.
2. **Forschung starten:** `startResearch(ResearchType)` beginnt eine Forschung.
3. **Update-Methode:** `updateResearchProgress()` sollte regelm√§√üig aufgerufen werden (z. B. durch ein Spiel-Update).
4. **Geb√§ude pr√ºfen den Forschungsstand:** `isFeatureAvailable(ResearchType)` erm√∂glicht Geb√§udeabh√§ngigkeiten.

---

### **Fragen & Erweiterungen**
- Soll es eine Kostenmechanik geben (z. B. Ressourcenverbrauch)?  
- Soll der Fortschritt persistiert werden (z. B. Speicherung im Savegame)?  
- Soll es Abh√§ngigkeiten zwischen Forschungen geben?  

Falls du lieber eine C#-Version willst oder √Ñnderungen hast, sag Bescheid! üòä
